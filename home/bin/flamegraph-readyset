#!/bin/bash

# ReadySet Flamegraph Generator
# ----------------------------
# This script creates flamegraphs for ReadySet processes.
#
# Usage:
#   ./flamegraph-readyset <output_filename> [output_directory]
#
# Arguments:
#   output_filename    - Name for the generated flamegraph (without .svg extension)
#   output_directory   - Optional: Directory to store flamegraphs
#                       Default: ~/Documents/flamegraphs/<current-date>
#
# Example:
#   ./flamegraph-readyset my-profile
#   ./flamegraph-readyset my-profile /custom/output/path

# Jason's magical script for creating flamegraphs for readyset.
# 
# This script was created to optimize my perf debugging flow,
# and hence might be optimized just for me/my systems.
# I use pop!_os (https://pop.system76.com/), an Ubuntu variant.
# 
# At a minimum, you need `perf` installed, as well as inferno-rs
# (https://github.com/jonhoo/inferno). I also use an updated version
# of `addr2line` (https://github.com/gimli-rs/addr2line), rather than
# the distro's default. 

# Check if an output filename is provided
if [ $# -eq 0 ]; then
    echo "Usage: $0 <output_filename> [output_directory]"
    exit 1
fi

# Get the output filename from the argument
OUTPUT_FILENAME=$1

# Get output directory from argument or use default
if [ $# -ge 2 ]; then
    OUTPUT_DIR="$2"
else
    OUTPUT_DIR=~/Documents/flamegraphs/$(date +%Y-%m-%d)
fi

mkdir -p "$OUTPUT_DIR"

# Find the PID for ReadySet upstream process
PID=$(ps -ef | grep readyset | grep upstream | awk '{print $2}')

# Check if PID is found
if [ -z "$PID" ]; then
    echo "No ReadySet upstream process found"
    exit 1
fi

# echo "addr2line: $(which addr2line)"

# Full paths for output
PERF_DATA_PATH="/tmp/perf.data"
FOLDED_DATA_PATH="/tmp/stacks.folded"
FULL_OUTPUT_PATH="${OUTPUT_DIR}/${OUTPUT_FILENAME}.svg"

# As per https://github.com/flamegraph-rs/flamegraph?tab=readme-ov-file#enabling-perf-for-use-by-unprivileged-users,
# lower the perf_event_paranoid value.
echo -1 | sudo sh -c 'cat > /proc/sys/kernel/perf_event_paranoid'
# lower the kptr_restrict value so we can get the kernel functions in the flamegraph
sudo sh -c 'echo 0 > /proc/sys/kernel/kptr_restrict'

# Collect perf data for some number of seconds
sudo perf record -F 99 -p "$PID" --call-graph "dwarf,16384" -g -o $PERF_DATA_PATH -- sleep 7
sudo chmod 777 $PERF_DATA_PATH

# Fold the stacks
# perf version 6.12, you can use an alternative addr2line tool (by using perf script --addr2line=/path/to/addr2line).
# sadly, ubuntu 22.04 only supports up to perf v6.9
perf script -i $PERF_DATA_PATH | inferno-collapse-perf > $FOLDED_DATA_PATH

# Generate flamegraph from perf data
cat $FOLDED_DATA_PATH | inferno-flamegraph > $FULL_OUTPUT_PATH

echo "Flamegraph generated at $FULL_OUTPUT_PATH"
